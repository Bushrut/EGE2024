# Пусть дан массив a0,a1,…an−1. В элементах массива записано количество осадков, выпавших в моменты времени 0,1...,n−1. Необходимо ответить на m запросов о количестве осадков, выпавших с l-го по r-й момент времени (0≤l≤r≤n−1)
# Формулируя задачу более строго, необходимо уметь отвечать на запросы суммы элементов массива на отрезке c [l;r]
# Заметим, что если мы будем на каждый запрос насчитывать циклом сумму элементов, то такое решение будет работать за вычислительную сложность O(mn)
#
# . Такой алгоритм не будет линейным от входных данных.
#
# Для решения задачи за линейное время рассмотрим структуру данных — массив префиксных сумм. Заведём массив p
# размера n+1. В i-м элементе массива p будем хранить сумму первых i элементов массива a
#
# . То есть
#
#     p0=0
#
# (сумма 0 элементов массива a
# )
# p1=a0
# p2=a0+a1
# p3=a0+a1+a2
#     pn=a0+a1+a2+....+an−1
#
# Для того чтобы высчитывать массив p
# эффективно (за линейную сложность), можно воспользоваться следующим соотношением: pi=pi−1+ai−1
#
# .
#
# Заметим, что теперь мы можем высчитывать сумму элементов al+al+1+...+ar
# как разность pr+1−pl
#
# .
#
# Таким образом, мы научились отвечать на запрос суммы элементов на отрезке за O(1)
# (с предварительным предподсчётом префиксных сумм) и решать всю задачу за O(n+m).

p = [0] * (n + 1)
for i in range(1, n + 1):
    p[i] = p[i - 1] + a[i -1]
m = int(input())
for j in range(m):
    l, r = map(int, input().split())
    print(p[r + 1] - p[l])